"""add_product_customer_order_lineitem_models

Revision ID: dfa3bb5397d5
Revises: e34b8f83b43a
Create Date: 2025-04-26 18:21:10.836840

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'dfa3bb5397d5'
down_revision: Union[str, None] = 'e34b8f83b43a'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute('CREATE EXTENSION IF NOT EXISTS "uuid-ossp";')
    op.create_table('customers',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('store_id', sa.UUID(), nullable=False),
    sa.Column('platform_customer_id', sa.String(length=100), nullable=False),
    sa.Column('email', sa.String(length=255), nullable=True),
    sa.Column('first_name', sa.Text(), nullable=True),
    sa.Column('last_name', sa.Text(), nullable=True),
    sa.Column('orders_count', sa.Integer(), nullable=False),
    sa.Column('total_spent', sa.Numeric(precision=12, scale=2), nullable=False),
    sa.Column('platform_created_at', postgresql.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('platform_updated_at', postgresql.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('synced_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['store_id'], ['stores.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('store_id', 'platform_customer_id', name='uq_store_platform_customer')
    )
    op.create_table('products',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('store_id', sa.UUID(), nullable=False),
    sa.Column('platform_product_id', sa.String(length=100), nullable=False),
    sa.Column('title', sa.Text(), nullable=False),
    sa.Column('vendor', sa.String(length=255), nullable=True),
    sa.Column('product_type', sa.String(length=255), nullable=True),
    sa.Column('platform_created_at', postgresql.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('platform_updated_at', postgresql.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('synced_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['store_id'], ['stores.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('store_id', 'platform_product_id', name='uq_store_platform_product')
    )
    op.create_table('orders',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('store_id', sa.UUID(), nullable=False),
    sa.Column('customer_id', sa.UUID(), nullable=True),
    sa.Column('platform_order_id', sa.String(length=100), nullable=False),
    sa.Column('order_number', sa.String(length=100), nullable=False),
    sa.Column('total_price', sa.Numeric(precision=12, scale=2), nullable=False),
    sa.Column('currency', sa.String(length=10), nullable=False),
    sa.Column('financial_status', sa.String(length=50), nullable=True),
    sa.Column('fulfillment_status', sa.String(length=50), nullable=True),
    sa.Column('processed_at', postgresql.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('platform_created_at', postgresql.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('platform_updated_at', postgresql.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('synced_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['customer_id'], ['customers.id'], ),
    sa.ForeignKeyConstraint(['store_id'], ['stores.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('store_id', 'platform_order_id', name='uq_store_platform_order')
    )
    op.create_table('line_items',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('order_id', sa.UUID(), nullable=False),
    sa.Column('product_id', sa.UUID(), nullable=True),
    sa.Column('platform_line_item_id', sa.String(length=100), nullable=False),
    sa.Column('platform_product_id', sa.String(length=100), nullable=True),
    sa.Column('platform_variant_id', sa.String(length=100), nullable=True),
    sa.Column('title', sa.Text(), nullable=False),
    sa.Column('variant_title', sa.Text(), nullable=True),
    sa.Column('sku', sa.String(length=100), nullable=True),
    sa.Column('quantity', sa.Integer(), nullable=False),
    sa.Column('price', sa.Numeric(precision=12, scale=2), nullable=False),
    sa.ForeignKeyConstraint(['order_id'], ['orders.id'], ),
    sa.ForeignKeyConstraint(['product_id'], ['products.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('order_id', 'platform_line_item_id', name='uq_order_platform_line_item')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute('DROP EXTENSION IF EXISTS "uuid-ossp";')
    op.drop_table('line_items')
    op.drop_table('orders')
    op.drop_table('products')
    op.drop_table('customers')
    # ### end Alembic commands ###
